Version 3.2 HI-TECH Software Intermediate Code
"36 PetitModbus/PetitModbus.c
[s S2 `uc 1 `uc 1 `uc + * -> 11 `i -> 2 `i -> 10 `i `us 1 ]
[n S2 . Address Function DataBuf DataLen ]
"47
[c E26 0 1 2 3 4 .. ]
[n E26 . PETIT_RXTX_IDLE PETIT_RXTX_START PETIT_RXTX_DATABUF PETIT_RXTX_WAIT_ANSWER PETIT_RXTX_TIMEOUT  ]
"25 PetitModbus/PetitModbusPort.h
[v _PetitModBus_UART_String `(uc ~T0 @X0 0 ef2`*uc`ui ]
"29 PetitModbus/PetitModbus.h
[s S1 `s 1 ]
[n S1 . ActValue ]
"33
[v _PetitRegisters `S1 ~T0 @X0 -> 0 `x e ]
"20 PetitModbus/PetitModbusPort.h
[v _PetitReceiveCounter `Vuc ~T0 @X0 0 e ]
"19
[v _PetitReceiveBuffer `Vuc ~T0 @X0 -> 0 `x e ]
"22
[v _PetitModBus_UART_Initialise `(v ~T0 @X0 0 ef ]
"23
[v _PetitModBus_TIMER_Initialise `(v ~T0 @X0 0 ef ]
[; ;PetitModbus.h: 27: extern unsigned char PETITMODBUS_SLAVE_ADDRESS;
[; ;PetitModbus.h: 29: typedef struct{
[; ;PetitModbus.h: 30: short ActValue;
[; ;PetitModbus.h: 31: }PetitRegStructure;
[; ;PetitModbus.h: 33: extern PetitRegStructure PetitRegisters[11];
[; ;PetitModbus.h: 34: extern volatile unsigned short PetitModbusTimerValue;
[; ;PetitModbus.h: 37: extern void InitPetitModbus(unsigned char PetitModbusSlaveAddress);
[; ;PetitModbus.h: 38: extern void ProcessPetitModbus(void);
[; ;PetitModbusPort.h: 19: extern volatile unsigned char PetitReceiveBuffer[(11*2 + 10)];
[; ;PetitModbusPort.h: 20: extern volatile unsigned char PetitReceiveCounter;
[; ;PetitModbusPort.h: 22: extern void PetitModBus_UART_Initialise(void);
[; ;PetitModbusPort.h: 23: extern void PetitModBus_TIMER_Initialise(void);
[; ;PetitModbusPort.h: 24: extern void PetitModBus_UART_Putch(unsigned char c);
[; ;PetitModbusPort.h: 25: extern unsigned char PetitModBus_UART_String(unsigned char *s, unsigned int Length);
[; ;PetitModbusPort.h: 27: extern void ReceiveInterrupt(unsigned char Data);
[; ;PetitModbusPort.h: 28: extern void PetitModBus_TimerValues(void);
"24 PetitModbus/PetitModbus.c
[v _PETITMODBUS_SLAVE_ADDRESS `uc ~T0 @X0 1 e ]
[i _PETITMODBUS_SLAVE_ADDRESS
-> -> 1 `i `uc
]
[; ;PetitModbus.c: 24: unsigned char PETITMODBUS_SLAVE_ADDRESS =1;
[; ;PetitModbus.c: 26: typedef enum
[; ;PetitModbus.c: 27: {
[; ;PetitModbus.c: 28: PETIT_RXTX_IDLE,
[; ;PetitModbus.c: 29: PETIT_RXTX_START,
[; ;PetitModbus.c: 30: PETIT_RXTX_DATABUF,
[; ;PetitModbus.c: 31: PETIT_RXTX_WAIT_ANSWER,
[; ;PetitModbus.c: 32: PETIT_RXTX_TIMEOUT
[; ;PetitModbus.c: 33: }PETIT_RXTX_STATE;
[; ;PetitModbus.c: 35: typedef struct
[; ;PetitModbus.c: 36: {
[; ;PetitModbus.c: 37: unsigned char Address;
[; ;PetitModbus.c: 38: unsigned char Function;
[; ;PetitModbus.c: 39: unsigned char DataBuf[(11*2 + 10)];
[; ;PetitModbus.c: 40: unsigned short DataLen;
[; ;PetitModbus.c: 41: }PETIT_RXTX_DATA;
"44
[v _Petit_Tx_Data `S2 ~T0 @X0 1 e ]
[; ;PetitModbus.c: 44: PETIT_RXTX_DATA Petit_Tx_Data;
"45
[v _Petit_Tx_Current `ui ~T0 @X0 1 e ]
[i _Petit_Tx_Current
-> -> 0 `i `ui
]
[; ;PetitModbus.c: 45: unsigned int Petit_Tx_Current = 0;
"46
[v _Petit_Tx_CRC16 `ui ~T0 @X0 1 e ]
[i _Petit_Tx_CRC16
-> 65535 `ui
]
[; ;PetitModbus.c: 46: unsigned int Petit_Tx_CRC16 = 0xFFFF;
"47
[v _Petit_Tx_State `E26 ~T0 @X0 1 e ]
[i _Petit_Tx_State
. `E26 0
]
[; ;PetitModbus.c: 47: PETIT_RXTX_STATE Petit_Tx_State = PETIT_RXTX_IDLE;
"48
[v _Petit_Tx_Buf `uc ~T0 @X0 + * -> 11 `i -> 2 `i -> 10 `i e ]
[; ;PetitModbus.c: 48: unsigned char Petit_Tx_Buf[(11*2 + 10)];
"49
[v _Petit_Tx_Buf_Size `ui ~T0 @X0 1 e ]
[i _Petit_Tx_Buf_Size
-> -> 0 `i `ui
]
[; ;PetitModbus.c: 49: unsigned int Petit_Tx_Buf_Size = 0;
"51
[v _Petit_Rx_Data `S2 ~T0 @X0 1 e ]
[; ;PetitModbus.c: 51: PETIT_RXTX_DATA Petit_Rx_Data;
"52
[v _Petit_Rx_CRC16 `ui ~T0 @X0 1 e ]
[i _Petit_Rx_CRC16
-> 65535 `ui
]
[; ;PetitModbus.c: 52: unsigned int Petit_Rx_CRC16 = 0xFFFF;
"53
[v _Petit_Rx_State `E26 ~T0 @X0 1 e ]
[i _Petit_Rx_State
. `E26 0
]
[; ;PetitModbus.c: 53: PETIT_RXTX_STATE Petit_Rx_State = PETIT_RXTX_IDLE;
"54
[v _Petit_Rx_Data_Available `uc ~T0 @X0 1 e ]
[i _Petit_Rx_Data_Available
-> -> 0 `i `uc
]
[; ;PetitModbus.c: 54: unsigned char Petit_Rx_Data_Available = 0;
"56
[v _PetitModbusTimerValue `Vus ~T0 @X0 1 e ]
[i _PetitModbusTimerValue
-> -> 0 `i `us
]
[; ;PetitModbus.c: 56: volatile unsigned short PetitModbusTimerValue = 0;
"65
[v _Petit_CRC16 `(v ~T0 @X0 1 ef2`Cuc`*ui ]
"66
{
[; ;PetitModbus.c: 65: void Petit_CRC16(const unsigned char Data, unsigned int* CRC)
[; ;PetitModbus.c: 66: {
[e :U _Petit_CRC16 ]
"65
[v _Data `Cuc ~T0 @X0 1 r1 ]
[v _CRC `*ui ~T0 @X0 1 r2 ]
"66
[f ]
"67
[v _i `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 67: unsigned int i;
[; ;PetitModbus.c: 69: *CRC = *CRC ^(unsigned int) Data;
"69
[e = *U _CRC ^ *U _CRC -> _Data `ui ]
[; ;PetitModbus.c: 70: for (i = 8; i > 0; i--)
"70
{
[e = _i -> -> 8 `i `ui ]
[e $ > _i -> -> 0 `i `ui 4  ]
[e $U 5  ]
"71
[e :U 4 ]
[; ;PetitModbus.c: 71: {
{
[; ;PetitModbus.c: 72: if (*CRC & 0x0001)
"72
[e $ ! != & *U _CRC -> -> 1 `i `ui -> -> 0 `i `ui 7  ]
[; ;PetitModbus.c: 73: *CRC = (*CRC >> 1) ^ 0xA001;
"73
[e = *U _CRC ^ >> *U _CRC -> 1 `i -> 40961 `ui ]
[e $U 8  ]
"74
[e :U 7 ]
[; ;PetitModbus.c: 74: else
[; ;PetitModbus.c: 75: *CRC >>= 1;
"75
[e =>> *U _CRC -> 1 `i ]
[e :U 8 ]
"76
}
"70
[e -- _i -> -> 1 `i `ui ]
[e $ > _i -> -> 0 `i `ui 4  ]
[e :U 5 ]
"76
}
[; ;PetitModbus.c: 76: }
[; ;PetitModbus.c: 77: }
"77
[e :UE 3 ]
}
"86
[v _Petit_DoSlaveTX `(uc ~T0 @X0 1 ef ]
"87
{
[; ;PetitModbus.c: 86: unsigned char Petit_DoSlaveTX(void)
[; ;PetitModbus.c: 87: {
[e :U _Petit_DoSlaveTX ]
[f ]
[; ;PetitModbus.c: 88: PetitModBus_UART_String(Petit_Tx_Buf,Petit_Tx_Buf_Size);
"88
[e ( _PetitModBus_UART_String (2 , &U _Petit_Tx_Buf _Petit_Tx_Buf_Size ]
[; ;PetitModbus.c: 90: Petit_Tx_Buf_Size = 0;
"90
[e = _Petit_Tx_Buf_Size -> -> 0 `i `ui ]
[; ;PetitModbus.c: 91: return 1;
"91
[e ) -> -> 1 `i `uc ]
[e $UE 9  ]
[; ;PetitModbus.c: 92: }
"92
[e :UE 9 ]
}
"101
[v _PetitSendMessage `(uc ~T0 @X0 1 ef ]
"102
{
[; ;PetitModbus.c: 101: unsigned char PetitSendMessage(void)
[; ;PetitModbus.c: 102: {
[e :U _PetitSendMessage ]
[f ]
[; ;PetitModbus.c: 103: if (Petit_Tx_State != PETIT_RXTX_IDLE)
"103
[e $ ! != -> _Petit_Tx_State `i -> . `E26 0 `i 11  ]
[; ;PetitModbus.c: 104: return 0;
"104
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[e :U 11 ]
[; ;PetitModbus.c: 106: Petit_Tx_Current =0;
"106
[e = _Petit_Tx_Current -> -> 0 `i `ui ]
[; ;PetitModbus.c: 107: Petit_Tx_State =PETIT_RXTX_START;
"107
[e = _Petit_Tx_State . `E26 1 ]
[; ;PetitModbus.c: 109: return 1;
"109
[e ) -> -> 1 `i `uc ]
[e $UE 10  ]
[; ;PetitModbus.c: 110: }
"110
[e :UE 10 ]
}
"118
[v _HandlePetitModbusError `(v ~T0 @X0 1 ef1`uc ]
"119
{
[; ;PetitModbus.c: 118: void HandlePetitModbusError(char ErrorCode)
[; ;PetitModbus.c: 119: {
[e :U _HandlePetitModbusError ]
"118
[v _ErrorCode `uc ~T0 @X0 1 r1 ]
"119
[f ]
[; ;PetitModbus.c: 121: Petit_Tx_Data.Function = ErrorCode | 0x80;
"121
[e = . _Petit_Tx_Data 1 -> | -> _ErrorCode `i -> 128 `i `uc ]
[; ;PetitModbus.c: 122: Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
"122
[e = . _Petit_Tx_Data 0 _PETITMODBUS_SLAVE_ADDRESS ]
[; ;PetitModbus.c: 123: Petit_Tx_Data.DataLen = 0;
"123
[e = . _Petit_Tx_Data 3 -> -> 0 `i `us ]
[; ;PetitModbus.c: 124: PetitSendMessage();
"124
[e ( _PetitSendMessage ..  ]
[; ;PetitModbus.c: 125: }
"125
[e :UE 12 ]
}
"134
[v _HandlePetitModbusReadHoldingRegisters `(v ~T0 @X0 1 ef ]
"135
{
[; ;PetitModbus.c: 134: void HandlePetitModbusReadHoldingRegisters(void)
[; ;PetitModbus.c: 135: {
[e :U _HandlePetitModbusReadHoldingRegisters ]
[f ]
"139
[v _Petit_StartAddress `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 139: unsigned int Petit_StartAddress = 0;
[e = _Petit_StartAddress -> -> 0 `i `ui ]
"140
[v _Petit_NumberOfRegisters `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 140: unsigned int Petit_NumberOfRegisters = 0;
[e = _Petit_NumberOfRegisters -> -> 0 `i `ui ]
"141
[v _Petit_i `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 141: unsigned int Petit_i = 0;
[e = _Petit_i -> -> 0 `i `ui ]
[; ;PetitModbus.c: 144: Petit_StartAddress = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
"144
[e = _Petit_StartAddress + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 145: Petit_NumberOfRegisters = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
"145
[e = _Petit_NumberOfRegisters + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 148: if((Petit_StartAddress+Petit_NumberOfRegisters)>11)
"148
[e $ ! > + _Petit_StartAddress _Petit_NumberOfRegisters -> -> 11 `i `ui 14  ]
[; ;PetitModbus.c: 149: HandlePetitModbusError(0x02);
"149
[e ( _HandlePetitModbusError (1 -> -> 2 `i `uc ]
[e $U 15  ]
"150
[e :U 14 ]
[; ;PetitModbus.c: 150: else
[; ;PetitModbus.c: 151: {
"151
{
[; ;PetitModbus.c: 153: Petit_Tx_Data.Function = 3;
"153
[e = . _Petit_Tx_Data 1 -> -> 3 `i `uc ]
[; ;PetitModbus.c: 154: Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
"154
[e = . _Petit_Tx_Data 0 _PETITMODBUS_SLAVE_ADDRESS ]
[; ;PetitModbus.c: 155: Petit_Tx_Data.DataLen = 1;
"155
[e = . _Petit_Tx_Data 3 -> -> 1 `i `us ]
[; ;PetitModbus.c: 156: Petit_Tx_Data.DataBuf[0] = 0;
"156
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux -> -> 0 `i `uc ]
[; ;PetitModbus.c: 158: for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
"158
{
[e = _Petit_i -> -> 0 `i `ui ]
[e $U 19  ]
"159
[e :U 16 ]
[; ;PetitModbus.c: 159: {
{
"160
[v _Petit_CurrentData `us ~T0 @X0 1 a ]
[; ;PetitModbus.c: 160: unsigned short Petit_CurrentData = PetitRegisters[Petit_StartAddress+Petit_i].ActValue;
[e = _Petit_CurrentData -> . *U + &U _PetitRegisters * -> + _Petit_StartAddress _Petit_i `ux -> -> # *U &U _PetitRegisters `ui `ux 0 `us ]
[; ;PetitModbus.c: 162: Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen] = (unsigned char) ((Petit_CurrentData & 0xFF00) >> 8);
"162
[e = *U + &U . _Petit_Tx_Data 2 * -> . _Petit_Tx_Data 3 `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux -> >> & -> _Petit_CurrentData `ui -> 65280 `ui -> 8 `i `uc ]
[; ;PetitModbus.c: 163: Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen + 1] = (unsigned char) (Petit_CurrentData & 0xFF);
"163
[e = *U + &U . _Petit_Tx_Data 2 * -> + -> . _Petit_Tx_Data 3 `ui -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux -> & -> _Petit_CurrentData `ui -> -> 255 `i `ui `uc ]
[; ;PetitModbus.c: 164: Petit_Tx_Data.DataLen += 2;
"164
[e =+ . _Petit_Tx_Data 3 -> -> 2 `i `us ]
[; ;PetitModbus.c: 165: Petit_Tx_Data.DataBuf[0] = Petit_Tx_Data.DataLen - 1;
"165
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux -> - -> . _Petit_Tx_Data 3 `ui -> -> 1 `i `ui `uc ]
"166
}
"158
[e ++ _Petit_i -> -> 1 `i `ui ]
[e :U 19 ]
[e $ < _Petit_i _Petit_NumberOfRegisters 16  ]
[e :U 17 ]
"166
}
[; ;PetitModbus.c: 166: }
[; ;PetitModbus.c: 168: PetitSendMessage();
"168
[e ( _PetitSendMessage ..  ]
"169
}
[e :U 15 ]
[; ;PetitModbus.c: 169: }
[; ;PetitModbus.c: 170: }
"170
[e :UE 13 ]
}
"180
[v _HandlePetitModbusWriteSingleRegister `(v ~T0 @X0 1 ef ]
"181
{
[; ;PetitModbus.c: 180: void HandlePetitModbusWriteSingleRegister(void)
[; ;PetitModbus.c: 181: {
[e :U _HandlePetitModbusWriteSingleRegister ]
[f ]
"183
[v _Petit_Address `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 183: unsigned int Petit_Address = 0;
[e = _Petit_Address -> -> 0 `i `ui ]
"184
[v _Petit_Value `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 184: unsigned int Petit_Value = 0;
[e = _Petit_Value -> -> 0 `i `ui ]
"185
[v _Petit_i `uc ~T0 @X0 1 a ]
[; ;PetitModbus.c: 185: unsigned char Petit_i = 0;
[e = _Petit_i -> -> 0 `i `uc ]
[; ;PetitModbus.c: 188: Petit_Address = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
"188
[e = _Petit_Address + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 189: Petit_Value = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
"189
[e = _Petit_Value + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 192: Petit_Tx_Data.Function = 6;
"192
[e = . _Petit_Tx_Data 1 -> -> 6 `i `uc ]
[; ;PetitModbus.c: 193: Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
"193
[e = . _Petit_Tx_Data 0 _PETITMODBUS_SLAVE_ADDRESS ]
[; ;PetitModbus.c: 194: Petit_Tx_Data.DataLen = 4;
"194
[e = . _Petit_Tx_Data 3 -> -> 4 `i `us ]
[; ;PetitModbus.c: 196: if(Petit_Address>=11)
"196
[e $ ! >= _Petit_Address -> -> 11 `i `ui 21  ]
[; ;PetitModbus.c: 197: HandlePetitModbusError(0x03);
"197
[e ( _HandlePetitModbusError (1 -> -> 3 `i `uc ]
[e $U 22  ]
"198
[e :U 21 ]
[; ;PetitModbus.c: 198: else
[; ;PetitModbus.c: 199: {
"199
{
[; ;PetitModbus.c: 200: PetitRegisters[Petit_Address].ActValue=Petit_Value;
"200
[e = . *U + &U _PetitRegisters * -> _Petit_Address `ux -> -> # *U &U _PetitRegisters `ui `ux 0 -> _Petit_Value `s ]
[; ;PetitModbus.c: 202: for (Petit_i = 0; Petit_i < 4; ++Petit_i)
"202
{
[e = _Petit_i -> -> 0 `i `uc ]
[e $ < -> _Petit_i `i -> 4 `i 23  ]
[e $U 24  ]
"203
[e :U 23 ]
[; ;PetitModbus.c: 203: Petit_Tx_Data.DataBuf[Petit_i] = Petit_Rx_Data.DataBuf[Petit_i];
[e = *U + &U . _Petit_Tx_Data 2 * -> _Petit_i `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux *U + &U . _Petit_Rx_Data 2 * -> _Petit_i `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
"202
[e =+ _Petit_i -> -> 1 `i `uc ]
[e $ < -> _Petit_i `i -> 4 `i 23  ]
[e :U 24 ]
"203
}
"204
}
[e :U 22 ]
[; ;PetitModbus.c: 204: }
[; ;PetitModbus.c: 206: PetitSendMessage();
"206
[e ( _PetitSendMessage ..  ]
[; ;PetitModbus.c: 207: }
"207
[e :UE 20 ]
}
"217
[v _HandleMPetitodbusWriteMultipleRegisters `(v ~T0 @X0 1 ef ]
"218
{
[; ;PetitModbus.c: 217: void HandleMPetitodbusWriteMultipleRegisters(void)
[; ;PetitModbus.c: 218: {
[e :U _HandleMPetitodbusWriteMultipleRegisters ]
[f ]
"220
[v _Petit_StartAddress `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 220: unsigned int Petit_StartAddress =0;
[e = _Petit_StartAddress -> -> 0 `i `ui ]
"221
[v _Petit_ByteCount `uc ~T0 @X0 1 a ]
[; ;PetitModbus.c: 221: unsigned char Petit_ByteCount =0;
[e = _Petit_ByteCount -> -> 0 `i `uc ]
"222
[v _Petit_NumberOfRegisters `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 222: unsigned int Petit_NumberOfRegisters =0;
[e = _Petit_NumberOfRegisters -> -> 0 `i `ui ]
"223
[v _Petit_i `uc ~T0 @X0 1 a ]
[; ;PetitModbus.c: 223: unsigned char Petit_i =0;
[e = _Petit_i -> -> 0 `i `uc ]
"224
[v _Petit_Value `ui ~T0 @X0 1 a ]
[; ;PetitModbus.c: 224: unsigned int Petit_Value =0;
[e = _Petit_Value -> -> 0 `i `ui ]
[; ;PetitModbus.c: 227: Petit_StartAddress = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
"227
[e = _Petit_StartAddress + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 228: Petit_NumberOfRegisters = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
"228
[e = _Petit_NumberOfRegisters + << -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui ]
[; ;PetitModbus.c: 229: Petit_ByteCount = Petit_Rx_Data.DataBuf[4];
"229
[e = _Petit_ByteCount *U + &U . _Petit_Rx_Data 2 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 232: if((Petit_StartAddress+Petit_NumberOfRegisters)>11)
"232
[e $ ! > + _Petit_StartAddress _Petit_NumberOfRegisters -> -> 11 `i `ui 27  ]
[; ;PetitModbus.c: 233: HandlePetitModbusError(0x03);
"233
[e ( _HandlePetitModbusError (1 -> -> 3 `i `uc ]
[e $U 28  ]
"234
[e :U 27 ]
[; ;PetitModbus.c: 234: else
[; ;PetitModbus.c: 235: {
"235
{
[; ;PetitModbus.c: 237: Petit_Tx_Data.Function = 16;
"237
[e = . _Petit_Tx_Data 1 -> -> 16 `i `uc ]
[; ;PetitModbus.c: 238: Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
"238
[e = . _Petit_Tx_Data 0 _PETITMODBUS_SLAVE_ADDRESS ]
[; ;PetitModbus.c: 239: Petit_Tx_Data.DataLen = 4;
"239
[e = . _Petit_Tx_Data 3 -> -> 4 `i `us ]
[; ;PetitModbus.c: 240: Petit_Tx_Data.DataBuf[0] = Petit_Rx_Data.DataBuf[0];
"240
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux *U + &U . _Petit_Rx_Data 2 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 241: Petit_Tx_Data.DataBuf[1] = Petit_Rx_Data.DataBuf[1];
"241
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux *U + &U . _Petit_Rx_Data 2 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 242: Petit_Tx_Data.DataBuf[2] = Petit_Rx_Data.DataBuf[2];
"242
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux *U + &U . _Petit_Rx_Data 2 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 243: Petit_Tx_Data.DataBuf[3] = Petit_Rx_Data.DataBuf[3];
"243
[e = *U + &U . _Petit_Tx_Data 2 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux *U + &U . _Petit_Rx_Data 2 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 246: for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
"246
{
[e = _Petit_i -> -> 0 `i `uc ]
[e $U 32  ]
"247
[e :U 29 ]
[; ;PetitModbus.c: 247: {
{
[; ;PetitModbus.c: 248: Petit_Value=(Petit_Rx_Data.DataBuf[5+2*Petit_i]<<8)+(Petit_Rx_Data.DataBuf[6+2*Petit_i]);
"248
[e = _Petit_Value -> + << -> *U + &U . _Petit_Rx_Data 2 * -> -> + -> 5 `i * -> 2 `i -> _Petit_i `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `i -> 8 `i -> *U + &U . _Petit_Rx_Data 2 * -> -> + -> 6 `i * -> 2 `i -> _Petit_i `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `i `ui ]
[; ;PetitModbus.c: 249: PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
"249
[e = . *U + &U _PetitRegisters * -> + _Petit_StartAddress -> _Petit_i `ui `ux -> -> # *U &U _PetitRegisters `ui `ux 0 -> _Petit_Value `s ]
"250
}
"246
[e ++ _Petit_i -> -> 1 `i `uc ]
[e :U 32 ]
[e $ < -> _Petit_i `ui _Petit_NumberOfRegisters 29  ]
[e :U 30 ]
"250
}
[; ;PetitModbus.c: 250: }
[; ;PetitModbus.c: 252: PetitSendMessage();
"252
[e ( _PetitSendMessage ..  ]
"253
}
[e :U 28 ]
[; ;PetitModbus.c: 253: }
[; ;PetitModbus.c: 254: }
"254
[e :UE 26 ]
}
"264
[v _Petit_RxDataAvailable `(uc ~T0 @X0 1 ef ]
"265
{
[; ;PetitModbus.c: 264: unsigned char Petit_RxDataAvailable(void)
[; ;PetitModbus.c: 265: {
[e :U _Petit_RxDataAvailable ]
[f ]
"266
[v _Result `uc ~T0 @X0 1 a ]
[; ;PetitModbus.c: 266: unsigned char Result = Petit_Rx_Data_Available;
[e = _Result _Petit_Rx_Data_Available ]
[; ;PetitModbus.c: 268: Petit_Rx_Data_Available = 0;
"268
[e = _Petit_Rx_Data_Available -> -> 0 `i `uc ]
[; ;PetitModbus.c: 270: return Result;
"270
[e ) _Result ]
[e $UE 33  ]
[; ;PetitModbus.c: 271: }
"271
[e :UE 33 ]
}
"280
[v _Petit_CheckRxTimeout `(uc ~T0 @X0 1 ef ]
"281
{
[; ;PetitModbus.c: 280: unsigned char Petit_CheckRxTimeout(void)
[; ;PetitModbus.c: 281: {
[e :U _Petit_CheckRxTimeout ]
[f ]
[; ;PetitModbus.c: 283: if (PetitModbusTimerValue>= 250)
"283
[e $ ! >= -> _PetitModbusTimerValue `ui -> -> 250 `i `ui 35  ]
[; ;PetitModbus.c: 284: {
"284
{
[; ;PetitModbus.c: 285: PetitModbusTimerValue =0;
"285
[e = _PetitModbusTimerValue -> -> 0 `i `us ]
[; ;PetitModbus.c: 286: PetitReceiveCounter =0;
"286
[e = _PetitReceiveCounter -> -> 0 `i `uc ]
[; ;PetitModbus.c: 287: return 1;
"287
[e ) -> -> 1 `i `uc ]
[e $UE 34  ]
"288
}
[e :U 35 ]
[; ;PetitModbus.c: 288: }
[; ;PetitModbus.c: 290: return 0;
"290
[e ) -> -> 0 `i `uc ]
[e $UE 34  ]
[; ;PetitModbus.c: 291: }
"291
[e :UE 34 ]
}
"302
[v _CheckPetitModbusBufferComplete `(uc ~T0 @X0 1 ef ]
"303
{
[; ;PetitModbus.c: 302: unsigned char CheckPetitModbusBufferComplete(void)
[; ;PetitModbus.c: 303: {
[e :U _CheckPetitModbusBufferComplete ]
[f ]
"304
[v _PetitExpectedReceiveCount `i ~T0 @X0 1 a ]
[; ;PetitModbus.c: 304: int PetitExpectedReceiveCount=0;
[e = _PetitExpectedReceiveCount -> 0 `i ]
[; ;PetitModbus.c: 306: if(PetitReceiveCounter>4)
"306
[e $ ! > -> _PetitReceiveCounter `i -> 4 `i 37  ]
[; ;PetitModbus.c: 307: {
"307
{
[; ;PetitModbus.c: 308: if(PetitReceiveBuffer[0]==PETITMODBUS_SLAVE_ADDRESS)
"308
[e $ ! == -> *U + &U _PetitReceiveBuffer * -> -> -> 0 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> _PETITMODBUS_SLAVE_ADDRESS `i 38  ]
[; ;PetitModbus.c: 309: {
"309
{
[; ;PetitModbus.c: 310: if(PetitReceiveBuffer[1]==0x01 || PetitReceiveBuffer[1]==0x02 || PetitReceiveBuffer[1]==0x03 || PetitReceiveBuffer[1]==0x04 || PetitReceiveBuffer[1]==0x05 || PetitReceiveBuffer[1]==0x06)
"310
[e $ ! || || || || || == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 1 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 2 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 3 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 4 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 5 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 6 `i 39  ]
[; ;PetitModbus.c: 311: {
"311
{
[; ;PetitModbus.c: 312: PetitExpectedReceiveCount =8;
"312
[e = _PetitExpectedReceiveCount -> 8 `i ]
"313
}
[; ;PetitModbus.c: 313: }
[e $U 40  ]
"314
[e :U 39 ]
[; ;PetitModbus.c: 314: else if(PetitReceiveBuffer[1]==0x0F || PetitReceiveBuffer[1]==0x10)
[e $ ! || == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 15 `i == -> *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 16 `i 41  ]
[; ;PetitModbus.c: 315: {
"315
{
[; ;PetitModbus.c: 316: PetitExpectedReceiveCount=PetitReceiveBuffer[6]+9;
"316
[e = _PetitExpectedReceiveCount + -> *U + &U _PetitReceiveBuffer * -> -> -> 6 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux `i -> 9 `i ]
"317
}
[; ;PetitModbus.c: 317: }
[e $U 42  ]
"318
[e :U 41 ]
[; ;PetitModbus.c: 318: else
[; ;PetitModbus.c: 319: {
"319
{
[; ;PetitModbus.c: 320: PetitReceiveCounter=0;
"320
[e = _PetitReceiveCounter -> -> 0 `i `uc ]
[; ;PetitModbus.c: 321: return 0;
"321
[e ) -> -> 0 `i `uc ]
[e $UE 36  ]
"322
}
[e :U 42 ]
[e :U 40 ]
"323
}
[; ;PetitModbus.c: 322: }
[; ;PetitModbus.c: 323: }
[e $U 43  ]
"324
[e :U 38 ]
[; ;PetitModbus.c: 324: else
[; ;PetitModbus.c: 325: {
"325
{
[; ;PetitModbus.c: 326: PetitReceiveCounter=0;
"326
[e = _PetitReceiveCounter -> -> 0 `i `uc ]
[; ;PetitModbus.c: 327: return 1;
"327
[e ) -> -> 1 `i `uc ]
[e $UE 36  ]
"328
}
[e :U 43 ]
"329
}
[; ;PetitModbus.c: 328: }
[; ;PetitModbus.c: 329: }
[e $U 44  ]
"330
[e :U 37 ]
[; ;PetitModbus.c: 330: else
[; ;PetitModbus.c: 331: return 2;
"331
[e ) -> -> 2 `i `uc ]
[e $UE 36  ]
[e :U 44 ]
[; ;PetitModbus.c: 333: if(PetitReceiveCounter==PetitExpectedReceiveCount)
"333
[e $ ! == -> _PetitReceiveCounter `i _PetitExpectedReceiveCount 45  ]
[; ;PetitModbus.c: 334: {
"334
{
[; ;PetitModbus.c: 335: return 3;
"335
[e ) -> -> 3 `i `uc ]
[e $UE 36  ]
"336
}
[e :U 45 ]
[; ;PetitModbus.c: 336: }
[; ;PetitModbus.c: 338: return 2;
"338
[e ) -> -> 2 `i `uc ]
[e $UE 36  ]
[; ;PetitModbus.c: 339: }
"339
[e :UE 36 ]
}
"347
[v _Petit_RxRTU `(v ~T0 @X0 1 ef ]
"348
{
[; ;PetitModbus.c: 347: void Petit_RxRTU(void)
[; ;PetitModbus.c: 348: {
[e :U _Petit_RxRTU ]
[f ]
"349
[v _Petit_i `uc ~T0 @X0 1 a ]
"350
[v _Petit_ReceiveBufferControl `uc ~T0 @X0 1 a ]
[; ;PetitModbus.c: 349: unsigned char Petit_i;
[; ;PetitModbus.c: 350: unsigned char Petit_ReceiveBufferControl=0;
[e = _Petit_ReceiveBufferControl -> -> 0 `i `uc ]
[; ;PetitModbus.c: 352: Petit_ReceiveBufferControl =CheckPetitModbusBufferComplete();
"352
[e = _Petit_ReceiveBufferControl ( _CheckPetitModbusBufferComplete ..  ]
[; ;PetitModbus.c: 354: if(Petit_ReceiveBufferControl==3)
"354
[e $ ! == -> _Petit_ReceiveBufferControl `i -> 3 `i 47  ]
[; ;PetitModbus.c: 355: {
"355
{
[; ;PetitModbus.c: 356: Petit_Rx_Data.Address =PetitReceiveBuffer[0];
"356
[e = . _Petit_Rx_Data 0 *U + &U _PetitReceiveBuffer * -> -> -> 0 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux ]
[; ;PetitModbus.c: 357: Petit_Rx_CRC16 = 0xffff;
"357
[e = _Petit_Rx_CRC16 -> 65535 `ui ]
[; ;PetitModbus.c: 358: Petit_CRC16(Petit_Rx_Data.Address, &Petit_Rx_CRC16);
"358
[e ( _Petit_CRC16 (2 , . _Petit_Rx_Data 0 &U _Petit_Rx_CRC16 ]
[; ;PetitModbus.c: 359: Petit_Rx_Data.Function =PetitReceiveBuffer[1];
"359
[e = . _Petit_Rx_Data 1 *U + &U _PetitReceiveBuffer * -> -> -> 1 `i `ui `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux ]
[; ;PetitModbus.c: 360: Petit_CRC16(Petit_Rx_Data.Function, &Petit_Rx_CRC16);
"360
[e ( _Petit_CRC16 (2 , . _Petit_Rx_Data 1 &U _Petit_Rx_CRC16 ]
[; ;PetitModbus.c: 362: Petit_Rx_Data.DataLen=0;
"362
[e = . _Petit_Rx_Data 3 -> -> 0 `i `us ]
[; ;PetitModbus.c: 364: for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
"364
{
[e = _Petit_i -> -> 2 `i `uc ]
[e $U 51  ]
"365
[e :U 48 ]
[; ;PetitModbus.c: 365: Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen++]=PetitReceiveBuffer[Petit_i];
[e = *U + &U . _Petit_Rx_Data 2 * -> ++ . _Petit_Rx_Data 3 -> -> 1 `i `us `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux *U + &U _PetitReceiveBuffer * -> _Petit_i `ux -> -> # *U &U _PetitReceiveBuffer `ui `ux ]
"364
[e ++ _Petit_i -> -> 1 `i `uc ]
[e :U 51 ]
[e $ < -> _Petit_i `i -> _PetitReceiveCounter `i 48  ]
[e :U 49 ]
"365
}
[; ;PetitModbus.c: 367: Petit_Rx_State =PETIT_RXTX_DATABUF;
"367
[e = _Petit_Rx_State . `E26 2 ]
[; ;PetitModbus.c: 369: PetitReceiveCounter=0;
"369
[e = _PetitReceiveCounter -> -> 0 `i `uc ]
"370
}
[e :U 47 ]
[; ;PetitModbus.c: 370: }
[; ;PetitModbus.c: 372: Petit_CheckRxTimeout();
"372
[e ( _Petit_CheckRxTimeout ..  ]
[; ;PetitModbus.c: 374: if ((Petit_Rx_State == PETIT_RXTX_DATABUF) && (Petit_Rx_Data.DataLen >= 2))
"374
[e $ ! && == -> _Petit_Rx_State `i -> . `E26 2 `i >= -> . _Petit_Rx_Data 3 `ui -> -> 2 `i `ui 52  ]
[; ;PetitModbus.c: 375: {
"375
{
[; ;PetitModbus.c: 377: Petit_Rx_Data.DataLen -= 2;
"377
[e =- . _Petit_Rx_Data 3 -> -> 2 `i `us ]
[; ;PetitModbus.c: 378: for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
"378
{
[e = _Petit_i -> -> 0 `i `uc ]
[e $U 56  ]
"379
[e :U 53 ]
[; ;PetitModbus.c: 379: {
{
[; ;PetitModbus.c: 380: Petit_CRC16(Petit_Rx_Data.DataBuf[Petit_i], &Petit_Rx_CRC16);
"380
[e ( _Petit_CRC16 (2 , *U + &U . _Petit_Rx_Data 2 * -> _Petit_i `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux &U _Petit_Rx_CRC16 ]
"381
}
"378
[e =+ _Petit_i -> -> 1 `i `uc ]
[e :U 56 ]
[e $ < -> _Petit_i `ui -> . _Petit_Rx_Data 3 `ui 53  ]
[e :U 54 ]
"381
}
[; ;PetitModbus.c: 381: }
[; ;PetitModbus.c: 383: if (((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen] + ((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen + 1] << 8)) == Petit_Rx_CRC16)
"383
[e $ ! == + -> *U + &U . _Petit_Rx_Data 2 * -> . _Petit_Rx_Data 3 `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui << -> *U + &U . _Petit_Rx_Data 2 * -> + -> . _Petit_Rx_Data 3 `ui -> -> 1 `i `ui `ux -> -> # *U &U . _Petit_Rx_Data 2 `ui `ux `ui -> 8 `i _Petit_Rx_CRC16 57  ]
[; ;PetitModbus.c: 384: {
"384
{
[; ;PetitModbus.c: 386: Petit_Rx_Data_Available = 1;
"386
[e = _Petit_Rx_Data_Available -> -> 1 `i `uc ]
"387
}
[e :U 57 ]
[; ;PetitModbus.c: 387: }
[; ;PetitModbus.c: 389: Petit_Rx_State = PETIT_RXTX_IDLE;
"389
[e = _Petit_Rx_State . `E26 0 ]
"390
}
[e :U 52 ]
[; ;PetitModbus.c: 390: }
[; ;PetitModbus.c: 391: }
"391
[e :UE 46 ]
}
"399
[v _Petit_TxRTU `(v ~T0 @X0 1 ef ]
"400
{
[; ;PetitModbus.c: 399: void Petit_TxRTU(void)
[; ;PetitModbus.c: 400: {
[e :U _Petit_TxRTU ]
[f ]
[; ;PetitModbus.c: 401: Petit_Tx_CRC16 =0xFFFF;
"401
[e = _Petit_Tx_CRC16 -> 65535 `ui ]
[; ;PetitModbus.c: 402: Petit_Tx_Buf_Size =0;
"402
[e = _Petit_Tx_Buf_Size -> -> 0 `i `ui ]
[; ;PetitModbus.c: 403: Petit_Tx_Buf[Petit_Tx_Buf_Size++] =Petit_Tx_Data.Address;
"403
[e = *U + &U _Petit_Tx_Buf * -> ++ _Petit_Tx_Buf_Size -> -> 1 `i `ui `ux -> -> # *U &U _Petit_Tx_Buf `ui `ux . _Petit_Tx_Data 0 ]
[; ;PetitModbus.c: 404: Petit_CRC16(Petit_Tx_Data.Address, &Petit_Tx_CRC16);
"404
[e ( _Petit_CRC16 (2 , . _Petit_Tx_Data 0 &U _Petit_Tx_CRC16 ]
[; ;PetitModbus.c: 405: Petit_Tx_Buf[Petit_Tx_Buf_Size++] =Petit_Tx_Data.Function;
"405
[e = *U + &U _Petit_Tx_Buf * -> ++ _Petit_Tx_Buf_Size -> -> 1 `i `ui `ux -> -> # *U &U _Petit_Tx_Buf `ui `ux . _Petit_Tx_Data 1 ]
[; ;PetitModbus.c: 406: Petit_CRC16(Petit_Tx_Data.Function, &Petit_Tx_CRC16);
"406
[e ( _Petit_CRC16 (2 , . _Petit_Tx_Data 1 &U _Petit_Tx_CRC16 ]
[; ;PetitModbus.c: 408: for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
"408
{
[e = _Petit_Tx_Current -> -> 0 `i `ui ]
[e $U 62  ]
"409
[e :U 59 ]
[; ;PetitModbus.c: 409: {
{
[; ;PetitModbus.c: 410: Petit_Tx_Buf[Petit_Tx_Buf_Size++]=Petit_Tx_Data.DataBuf[Petit_Tx_Current];
"410
[e = *U + &U _Petit_Tx_Buf * -> ++ _Petit_Tx_Buf_Size -> -> 1 `i `ui `ux -> -> # *U &U _Petit_Tx_Buf `ui `ux *U + &U . _Petit_Tx_Data 2 * -> _Petit_Tx_Current `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux ]
[; ;PetitModbus.c: 411: Petit_CRC16(Petit_Tx_Data.DataBuf[Petit_Tx_Current], &Petit_Tx_CRC16);
"411
[e ( _Petit_CRC16 (2 , *U + &U . _Petit_Tx_Data 2 * -> _Petit_Tx_Current `ux -> -> # *U &U . _Petit_Tx_Data 2 `ui `ux &U _Petit_Tx_CRC16 ]
"412
}
"408
[e ++ _Petit_Tx_Current -> -> 1 `i `ui ]
[e :U 62 ]
[e $ < _Petit_Tx_Current -> . _Petit_Tx_Data 3 `ui 59  ]
[e :U 60 ]
"412
}
[; ;PetitModbus.c: 412: }
[; ;PetitModbus.c: 414: Petit_Tx_Buf[Petit_Tx_Buf_Size++] = Petit_Tx_CRC16 & 0x00FF;
"414
[e = *U + &U _Petit_Tx_Buf * -> ++ _Petit_Tx_Buf_Size -> -> 1 `i `ui `ux -> -> # *U &U _Petit_Tx_Buf `ui `ux -> & _Petit_Tx_CRC16 -> -> 255 `i `ui `uc ]
[; ;PetitModbus.c: 415: Petit_Tx_Buf[Petit_Tx_Buf_Size++] =(Petit_Tx_CRC16 & 0xFF00) >> 8;
"415
[e = *U + &U _Petit_Tx_Buf * -> ++ _Petit_Tx_Buf_Size -> -> 1 `i `ui `ux -> -> # *U &U _Petit_Tx_Buf `ui `ux -> >> & _Petit_Tx_CRC16 -> 65280 `ui -> 8 `i `uc ]
[; ;PetitModbus.c: 417: Petit_DoSlaveTX();
"417
[e ( _Petit_DoSlaveTX ..  ]
[; ;PetitModbus.c: 419: Petit_Tx_State =PETIT_RXTX_IDLE;
"419
[e = _Petit_Tx_State . `E26 0 ]
[; ;PetitModbus.c: 420: }
"420
[e :UE 58 ]
}
"428
[v _ProcessPetitModbus `(v ~T0 @X0 1 ef ]
"429
{
[; ;PetitModbus.c: 428: void ProcessPetitModbus(void)
[; ;PetitModbus.c: 429: {
[e :U _ProcessPetitModbus ]
[f ]
[; ;PetitModbus.c: 430: if (Petit_Tx_State != PETIT_RXTX_IDLE)
"430
[e $ ! != -> _Petit_Tx_State `i -> . `E26 0 `i 64  ]
[; ;PetitModbus.c: 431: Petit_TxRTU();
"431
[e ( _Petit_TxRTU ..  ]
[e :U 64 ]
[; ;PetitModbus.c: 433: Petit_RxRTU();
"433
[e ( _Petit_RxRTU ..  ]
[; ;PetitModbus.c: 435: if (Petit_RxDataAvailable())
"435
[e $ ! != -> ( _Petit_RxDataAvailable ..  `i -> -> -> 0 `i `uc `i 65  ]
[; ;PetitModbus.c: 436: {
"436
{
[; ;PetitModbus.c: 437: if (Petit_Rx_Data.Address == PETITMODBUS_SLAVE_ADDRESS)
"437
[e $ ! == -> . _Petit_Rx_Data 0 `i -> _PETITMODBUS_SLAVE_ADDRESS `i 66  ]
[; ;PetitModbus.c: 438: {
"438
{
[; ;PetitModbus.c: 439: switch (Petit_Rx_Data.Function)
"439
[e $U 68  ]
[; ;PetitModbus.c: 440: {
"440
{
[; ;PetitModbus.c: 442: case 3: { HandlePetitModbusReadHoldingRegisters(); break; }
"442
[e :U 69 ]
{
[e ( _HandlePetitModbusReadHoldingRegisters ..  ]
[e $U 67  ]
}
[; ;PetitModbus.c: 445: case 6: { HandlePetitModbusWriteSingleRegister(); break; }
"445
[e :U 70 ]
{
[e ( _HandlePetitModbusWriteSingleRegister ..  ]
[e $U 67  ]
}
[; ;PetitModbus.c: 448: case 16: { HandleMPetitodbusWriteMultipleRegisters(); break; }
"448
[e :U 71 ]
{
[e ( _HandleMPetitodbusWriteMultipleRegisters ..  ]
[e $U 67  ]
}
[; ;PetitModbus.c: 450: default: { HandlePetitModbusError(0x01); break; }
"450
[e :U 72 ]
{
[e ( _HandlePetitModbusError (1 -> -> 1 `i `uc ]
[e $U 67  ]
}
"451
}
[; ;PetitModbus.c: 451: }
[e $U 67  ]
"439
[e :U 68 ]
[e [\ . _Petit_Rx_Data 1 , $ -> -> 3 `i `uc 69
 , $ -> -> 6 `i `uc 70
 , $ -> -> 16 `i `uc 71
 72 ]
"451
[e :U 67 ]
"452
}
[e :U 66 ]
"453
}
[e :U 65 ]
[; ;PetitModbus.c: 452: }
[; ;PetitModbus.c: 453: }
[; ;PetitModbus.c: 454: }
"454
[e :UE 63 ]
}
"462
[v _InitPetitModbus `(v ~T0 @X0 1 ef1`uc ]
"463
{
[; ;PetitModbus.c: 462: void InitPetitModbus(unsigned char PetitModbusSlaveAddress)
[; ;PetitModbus.c: 463: {
[e :U _InitPetitModbus ]
"462
[v _PetitModbusSlaveAddress `uc ~T0 @X0 1 r1 ]
"463
[f ]
[; ;PetitModbus.c: 464: PETITMODBUS_SLAVE_ADDRESS =PetitModbusSlaveAddress;
"464
[e = _PETITMODBUS_SLAVE_ADDRESS _PetitModbusSlaveAddress ]
[; ;PetitModbus.c: 466: PetitModBus_UART_Initialise();
"466
[e ( _PetitModBus_UART_Initialise ..  ]
[; ;PetitModbus.c: 467: PetitModBus_TIMER_Initialise();
"467
[e ( _PetitModBus_TIMER_Initialise ..  ]
[; ;PetitModbus.c: 468: }
"468
[e :UE 73 ]
}
