
# 1 "PetitModbus/PetitModbus.c"

# 27 "PetitModbus/PetitModbus.h"
extern unsigned char PETITMODBUS_SLAVE_ADDRESS;

typedef struct{
short ActValue;
}PetitRegStructure;

extern PetitRegStructure PetitRegisters[11];
extern volatile unsigned short PetitModbusTimerValue;


extern void InitPetitModbus(unsigned char PetitModbusSlaveAddress);
extern void ProcessPetitModbus(void);

# 19 "PetitModbus/PetitModbusPort.h"
extern volatile unsigned char PetitReceiveBuffer[(11*2 + 10)];
extern volatile unsigned char PetitReceiveCounter;

extern void PetitModBus_UART_Initialise(void);
extern void PetitModBus_TIMER_Initialise(void);
extern void PetitModBus_UART_Putch(unsigned char c);
extern unsigned char PetitModBus_UART_String(unsigned char *s, unsigned int Length);

extern void ReceiveInterrupt(unsigned char Data);
extern void PetitModBus_TimerValues(void);

# 24 "PetitModbus/PetitModbus.c"
unsigned char PETITMODBUS_SLAVE_ADDRESS =1;

typedef enum
{
PETIT_RXTX_IDLE,
PETIT_RXTX_START,
PETIT_RXTX_DATABUF,
PETIT_RXTX_WAIT_ANSWER,
PETIT_RXTX_TIMEOUT
}PETIT_RXTX_STATE;

typedef struct
{
unsigned char Address;
unsigned char Function;
unsigned char DataBuf[(11*2 + 10)];
unsigned short DataLen;
}PETIT_RXTX_DATA;


PETIT_RXTX_DATA Petit_Tx_Data;
unsigned int Petit_Tx_Current = 0;
unsigned int Petit_Tx_CRC16 = 0xFFFF;
PETIT_RXTX_STATE Petit_Tx_State = PETIT_RXTX_IDLE;
unsigned char Petit_Tx_Buf[(11*2 + 10)];
unsigned int Petit_Tx_Buf_Size = 0;

PETIT_RXTX_DATA Petit_Rx_Data;
unsigned int Petit_Rx_CRC16 = 0xFFFF;
PETIT_RXTX_STATE Petit_Rx_State = PETIT_RXTX_IDLE;
unsigned char Petit_Rx_Data_Available = 0;

volatile unsigned short PetitModbusTimerValue = 0;

# 65
void Petit_CRC16(const unsigned char Data, unsigned int* CRC)
{
unsigned int i;

*CRC = *CRC ^(unsigned int) Data;
for (i = 8; i > 0; i--)
{
if (*CRC & 0x0001)
*CRC = (*CRC >> 1) ^ 0xA001;
else
*CRC >>= 1;
}
}

# 86
unsigned char Petit_DoSlaveTX(void)
{
PetitModBus_UART_String(Petit_Tx_Buf,Petit_Tx_Buf_Size);

Petit_Tx_Buf_Size = 0;
return 1;
}

# 101
unsigned char PetitSendMessage(void)
{
if (Petit_Tx_State != PETIT_RXTX_IDLE)
return 0;

Petit_Tx_Current =0;
Petit_Tx_State =PETIT_RXTX_START;

return 1;
}

# 118
void HandlePetitModbusError(char ErrorCode)
{

Petit_Tx_Data.Function = ErrorCode | 0x80;
Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
Petit_Tx_Data.DataLen = 0;
PetitSendMessage();
}

# 134
void HandlePetitModbusReadHoldingRegisters(void)
{



unsigned int Petit_StartAddress = 0;
unsigned int Petit_NumberOfRegisters = 0;
unsigned int Petit_i = 0;


Petit_StartAddress = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
Petit_NumberOfRegisters = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);


if((Petit_StartAddress+Petit_NumberOfRegisters)>11)
HandlePetitModbusError(0x02);
else
{

Petit_Tx_Data.Function = 3;
Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
Petit_Tx_Data.DataLen = 1;
Petit_Tx_Data.DataBuf[0] = 0;

for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
{
unsigned short Petit_CurrentData = PetitRegisters[Petit_StartAddress+Petit_i].ActValue;

Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen] = (unsigned char) ((Petit_CurrentData & 0xFF00) >> 8);
Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen + 1] = (unsigned char) (Petit_CurrentData & 0xFF);
Petit_Tx_Data.DataLen += 2;
Petit_Tx_Data.DataBuf[0] = Petit_Tx_Data.DataLen - 1;
}

PetitSendMessage();
}
}

# 180
void HandlePetitModbusWriteSingleRegister(void)
{

unsigned int Petit_Address = 0;
unsigned int Petit_Value = 0;
unsigned char Petit_i = 0;


Petit_Address = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
Petit_Value = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);


Petit_Tx_Data.Function = 6;
Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
Petit_Tx_Data.DataLen = 4;

if(Petit_Address>=11)
HandlePetitModbusError(0x03);
else
{
PetitRegisters[Petit_Address].ActValue=Petit_Value;

for (Petit_i = 0; Petit_i < 4; ++Petit_i)
Petit_Tx_Data.DataBuf[Petit_i] = Petit_Rx_Data.DataBuf[Petit_i];
}

PetitSendMessage();
}

# 217
void HandleMPetitodbusWriteMultipleRegisters(void)
{

unsigned int Petit_StartAddress =0;
unsigned char Petit_ByteCount =0;
unsigned int Petit_NumberOfRegisters =0;
unsigned char Petit_i =0;
unsigned int Petit_Value =0;


Petit_StartAddress = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
Petit_NumberOfRegisters = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
Petit_ByteCount = Petit_Rx_Data.DataBuf[4];


if((Petit_StartAddress+Petit_NumberOfRegisters)>11)
HandlePetitModbusError(0x03);
else
{

Petit_Tx_Data.Function = 16;
Petit_Tx_Data.Address = PETITMODBUS_SLAVE_ADDRESS;
Petit_Tx_Data.DataLen = 4;
Petit_Tx_Data.DataBuf[0] = Petit_Rx_Data.DataBuf[0];
Petit_Tx_Data.DataBuf[1] = Petit_Rx_Data.DataBuf[1];
Petit_Tx_Data.DataBuf[2] = Petit_Rx_Data.DataBuf[2];
Petit_Tx_Data.DataBuf[3] = Petit_Rx_Data.DataBuf[3];


for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
{
Petit_Value=(Petit_Rx_Data.DataBuf[5+2*Petit_i]<<8)+(Petit_Rx_Data.DataBuf[6+2*Petit_i]);
PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
}

PetitSendMessage();
}
}

# 264
unsigned char Petit_RxDataAvailable(void)
{
unsigned char Result = Petit_Rx_Data_Available;

Petit_Rx_Data_Available = 0;

return Result;
}

# 280
unsigned char Petit_CheckRxTimeout(void)
{

if (PetitModbusTimerValue>= 250)
{
PetitModbusTimerValue =0;
PetitReceiveCounter =0;
return 1;
}

return 0;
}

# 302
unsigned char CheckPetitModbusBufferComplete(void)
{
int PetitExpectedReceiveCount=0;

if(PetitReceiveCounter>4)
{
if(PetitReceiveBuffer[0]==PETITMODBUS_SLAVE_ADDRESS)
{
if(PetitReceiveBuffer[1]==0x01 || PetitReceiveBuffer[1]==0x02 || PetitReceiveBuffer[1]==0x03 || PetitReceiveBuffer[1]==0x04 || PetitReceiveBuffer[1]==0x05 || PetitReceiveBuffer[1]==0x06)
{
PetitExpectedReceiveCount =8;
}
else if(PetitReceiveBuffer[1]==0x0F || PetitReceiveBuffer[1]==0x10)
{
PetitExpectedReceiveCount=PetitReceiveBuffer[6]+9;
}
else
{
PetitReceiveCounter=0;
return 0;
}
}
else
{
PetitReceiveCounter=0;
return 1;
}
}
else
return 2;

if(PetitReceiveCounter==PetitExpectedReceiveCount)
{
return 3;
}

return 2;
}

# 347
void Petit_RxRTU(void)
{
unsigned char Petit_i;
unsigned char Petit_ReceiveBufferControl=0;

Petit_ReceiveBufferControl =CheckPetitModbusBufferComplete();

if(Petit_ReceiveBufferControl==3)
{
Petit_Rx_Data.Address =PetitReceiveBuffer[0];
Petit_Rx_CRC16 = 0xffff;
Petit_CRC16(Petit_Rx_Data.Address, &Petit_Rx_CRC16);
Petit_Rx_Data.Function =PetitReceiveBuffer[1];
Petit_CRC16(Petit_Rx_Data.Function, &Petit_Rx_CRC16);

Petit_Rx_Data.DataLen=0;

for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen++]=PetitReceiveBuffer[Petit_i];

Petit_Rx_State =PETIT_RXTX_DATABUF;

PetitReceiveCounter=0;
}

Petit_CheckRxTimeout();

if ((Petit_Rx_State == PETIT_RXTX_DATABUF) && (Petit_Rx_Data.DataLen >= 2))
{

Petit_Rx_Data.DataLen -= 2;
for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
{
Petit_CRC16(Petit_Rx_Data.DataBuf[Petit_i], &Petit_Rx_CRC16);
}

if (((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen] + ((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen + 1] << 8)) == Petit_Rx_CRC16)
{

Petit_Rx_Data_Available = 1;
}

Petit_Rx_State = PETIT_RXTX_IDLE;
}
}

# 399
void Petit_TxRTU(void)
{
Petit_Tx_CRC16 =0xFFFF;
Petit_Tx_Buf_Size =0;
Petit_Tx_Buf[Petit_Tx_Buf_Size++] =Petit_Tx_Data.Address;
Petit_CRC16(Petit_Tx_Data.Address, &Petit_Tx_CRC16);
Petit_Tx_Buf[Petit_Tx_Buf_Size++] =Petit_Tx_Data.Function;
Petit_CRC16(Petit_Tx_Data.Function, &Petit_Tx_CRC16);

for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
{
Petit_Tx_Buf[Petit_Tx_Buf_Size++]=Petit_Tx_Data.DataBuf[Petit_Tx_Current];
Petit_CRC16(Petit_Tx_Data.DataBuf[Petit_Tx_Current], &Petit_Tx_CRC16);
}

Petit_Tx_Buf[Petit_Tx_Buf_Size++] = Petit_Tx_CRC16 & 0x00FF;
Petit_Tx_Buf[Petit_Tx_Buf_Size++] =(Petit_Tx_CRC16 & 0xFF00) >> 8;

Petit_DoSlaveTX();

Petit_Tx_State =PETIT_RXTX_IDLE;
}

# 428
void ProcessPetitModbus(void)
{
if (Petit_Tx_State != PETIT_RXTX_IDLE)
Petit_TxRTU();

Petit_RxRTU();

if (Petit_RxDataAvailable())
{
if (Petit_Rx_Data.Address == PETITMODBUS_SLAVE_ADDRESS)
{
switch (Petit_Rx_Data.Function)
{

case 3: { HandlePetitModbusReadHoldingRegisters(); break; }


case 6: { HandlePetitModbusWriteSingleRegister(); break; }


case 16: { HandleMPetitodbusWriteMultipleRegisters(); break; }

default: { HandlePetitModbusError(0x01); break; }
}
}
}
}

# 462
void InitPetitModbus(unsigned char PetitModbusSlaveAddress)
{
PETITMODBUS_SLAVE_ADDRESS =PetitModbusSlaveAddress;

PetitModBus_UART_Initialise();
PetitModBus_TIMER_Initialise();
}

